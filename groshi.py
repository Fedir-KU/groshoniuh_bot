import os
import re
import json
import threading
import http.server
import socketserver
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackContext
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import openai
from google.cloud import vision
from google.oauth2 import service_account

# –î–æ–∑–≤–æ–ª–µ–Ω–∏–π chat_id –≤–∞—à–æ—ó –≥—Ä—É–ø–∏/—á–∞—Ç—É
ALLOWED_CHAT_ID = -4729811445  # <-- –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π ID

# üõ† –ó–∞–ø—É—Å–∫ —Ñ–µ–π–∫–æ–≤–æ–≥–æ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ (Render –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–æ—Ä—Ç —ñ–∑ $PORT)
def keep_port_open():
    PORT = int(os.environ.get("PORT", "10000"))
    Handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print(f"Serving fake HTTP on port {PORT}")
        httpd.serve_forever()

threading.Thread(target=keep_port_open, daemon=True).start()

# üì• –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI
openai.api_key = OPENAI_API_KEY
print("DEBUG: OPENAI_API_KEY=", OPENAI_API_KEY)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets —Ç–∞ Vision API
creds_dict = json.loads(GOOGLE_CREDS_JSON)
sheets_scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
sheets_creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, sheets_scope)
gspread_client = gspread.authorize(sheets_creds)
sheet = gspread_client.open_by_key(SHEET_ID).sheet1

vision_creds = service_account.Credentials.from_service_account_info(creds_dict)
vision_client = vision.ImageAnnotatorClient(credentials=vision_creds)

# üñº OCR: –≤–∏—Ç—è–≥ —Ç–µ–∫—Å—Ç—É –∑ —Ñ–æ—Ç–æ
def ocr_extract_text(path: str) -> str:
    with open(path, 'rb') as f:
        content = f.read()
    image = vision.Image(content=content)
    result = vision_client.text_detection(image=image)
    return result.text_annotations[0].description if result.text_annotations else ''

# üß† GPT-–ø–∞—Ä—Å–∏–Ω–≥ –≤–∏—Ç—Ä–∞—Ç–∏
def parse_expense(text: str) -> dict:
    prompt = (
        f"–í–∏–¥–æ–±–µ—Ä–∏ –∑ —Ü—å–æ–≥–æ —Ç–µ–∫—Å—Ç—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —Å—É–º—É (—Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º) —Ç–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å:\n"
        f"\"{text}\"\n"
        "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π JSON-–æ–±'—î–∫—Ç–æ–º –∑ –ø–æ–ª—è–º–∏ category, amount, description."
    )
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å openai>=1.0.0
    resp = openai.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role":"user","content":prompt}],
        temperature=0
    )
    return json.loads(resp.choices[0].message.content)

# ‚ñ∂Ô∏è /id ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ chat_id
async def send_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    await update.message.reply_text(f"Chat ID = {update.effective_chat.id}")

# ‚ñ∂Ô∏è /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    help_text = (
        "üîπ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/id ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ chat_id —á–∞—Ç—É\n"
        "/help ‚Äî —Ü–µ–π –¥–æ–≤—ñ–¥–Ω–∏–∫\n"
        "/query <–∑–∞–ø–∏—Ç> ‚Äî –∑–∞–ø–∏—Ç –¥–æ —Ç–∞–±–ª–∏—Ü—ñ –≤–∏—Ç—Ä–∞—Ç\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —Ñ–æ—Ç–æ —á–µ–∫—É ‚Äî –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î –≤–∏—Ç—Ä–∞—Ç—É."
    )
    await update.message.reply_text(help_text)

# ‚ñ∂Ô∏è /query ‚Äî –æ–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ —á–µ—Ä–µ–∑ GPT
async def query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    # debug
    print(">>> query_handler called with args:", context.args)
    await update.message.reply_text(f"–û—Ç—Ä–∏–º–∞–≤ args: {context.args}")
    try:
        q = " ".join(context.args)
        if not q:
            await update.message.reply_text(
                "‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /query <–∑–∞–ø–∏—Ç>\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /query —Å–∫—ñ–ª—å–∫–∏ —è –≤–∏—Ç—Ä–∞—Ç–∏–≤ –Ω–∞ —ó–∂—É —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è?"
            )
            return
        records = sheet.get_all_records()
        records = records[-50:] if len(records) > 50 else records
        records_json = json.dumps(records, ensure_ascii=False)
        prompt = (
            f"–£ –º–µ–Ω–µ —î –¥–∞–Ω—ñ –≤–∏—Ç—Ä–∞—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON:\n{records_json}\n"
            f"–ó–∞–ø–∏—Ç: {q}\n–û—Ç–≤—ñ—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –∫–æ—Ä–æ—Ç–∫–æ:"
        )
        # –ù–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å OpenAI
        resp = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role":"user","content":prompt}],
            temperature=0
        )
        answer = resp.choices[0].message.content
        await update.message.reply_text(answer)
    except Exception as e:
        print("Error in query_handler:", e)
        import traceback; traceback.print_exc()
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è /query: {e}")

# ‚ñ∂Ô∏è –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ —Ñ–æ—Ç–æ —á–µ–∫—ñ–≤
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    if update.message.photo:
        file = await context.bot.get_file(update.message.photo[-1].file_id)
        path = "/tmp/receipt.jpg"
        await file.download_to_drive(path)
        text = ocr_extract_text(path)
    else:
        text = update.message.text or ''
    try:
        exp = parse_expense(text)
        cat = exp['category']
        amount = exp['amount']
        desc = exp.get('description', '').strip()
    except Exception as e:
        print("Error in parse_expense:", e)
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–±–æ —Ñ–æ—Ç–æ."
        )
        return
    date = datetime.now().strftime("%Y-%m-%d")
    user = update.message.from_user.first_name
    sheet.append_row([date, user, cat, amount, desc])
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ: {cat} ‚Äî {amount} –≥—Ä–Ω ‚Äî {desc}")

# ‚ñ∂Ô∏è Global error handler
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    print("‚ùóÔ∏è Exception in handler:", context.error)
    if hasattr(update, 'effective_message') and update.effective_message:
        await update.effective_message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ü–µ—Ä–µ–≤—ñ—Ä –ª–æ–≥–∏.")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    import asyncio
    app = ApplicationBuilder().token(TOKEN).build()
    # –≤–∏–¥–∞–ª—è—î–º–æ webhook —Ç–∞ —Å—Ç–∞—Ä—ñ –∞–ø–¥–µ–π—Ç–∏
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(app.bot.delete_webhook(drop_pending_updates=True))
    # —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
    app.add_handler(CommandHandler("id", send_id))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("query", query_handler))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.add_error_handler(error_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    # polling –∑ –≤—ñ–¥–∫–∏–¥–∞–Ω–Ω—è–º —Å—Ç–∞—Ä–∏—Ö –∞–ø–¥–µ–π—Ç—ñ–≤
    app.run_polling(drop_pending_updates=True)
