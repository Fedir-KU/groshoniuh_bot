import os
import re
import json
import threading
import http.server
import socketserver
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import pandas as pd

# –î–æ–∑–≤–æ–ª–µ–Ω–∏–π chat_id –≤–∞—à–æ—ó –≥—Ä—É–ø–∏/—á–∞—Ç—É
ALLOWED_CHAT_ID = -4729811445  # <-- –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π ID

# –ó–∞–ø—É—Å–∫ —Ñ–µ–π–∫–æ–≤–æ–≥–æ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render

def keep_port_open():
    PORT = int(os.environ.get("PORT", "10000"))
    Handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        httpd.serve_forever()

threading.Thread(target=keep_port_open, daemon=True).start()

# –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è —Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets
TOKEN = os.getenv("TELEGRAM_TOKEN")
SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")

creds_dict = json.loads(GOOGLE_CREDS_JSON)
sheets_creds = ServiceAccountCredentials.from_json_keyfile_dict(
    creds_dict,
    ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
)
gspread_client = gspread.authorize(sheets_creds)
sheet = gspread_client.open_by_key(SHEET_ID).sheet1

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è rule-based –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
CATEGORY_KEYWORDS = {
    "—ó–∂–∞": ["—ó–∂–∞", "–ø—ñ—Ü–∞", "—Ö–ª—ñ–±", "–∫–∞–≤–∞", "—Å—É–ø"],
    "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["—Ç–∞–∫—Å—ñ", "uber", "bus", "–º–µ—Ç—Ä–æ", "–±–µ–Ω–∑–∏–Ω"],
    "—Ä–æ–∑–≤–∞–≥–∏": ["–∫—ñ–Ω–æ", "—Ç–µ–∞—Ç—Ä", "—ñ–≥—Ä–∏", "–∫–ª—É–±"],
    "–ø–æ–∫—É–ø–∫–∏": ["–∫—É–ø–∏–≤", "–º–∞–≥–∞–∑–∏–Ω", "amazon", "ozon"],
    "–ø–æ–±—É—Ç": ["–∫–æ–º—É–Ω–∞–ª", "—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç", "–∑–≤'—è–∑–æ–∫", "–≥–∞–∑", "—Å–≤—ñ—Ç–ª–æ", "–ø–ª–∞—Ç–µ–∂"]
}

def classify_category(text: str) -> str:
    low = text.lower()
    for cat, kws in CATEGORY_KEYWORDS.items():
        if any(kw in low for kw in kws):
            return cat
    return "—ñ–Ω—à–µ"

# /id ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î chat_id
async def send_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    await update.message.reply_text(f"Chat ID = {update.effective_chat.id}")

# /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    help_text = (
        "üîπ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/id ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ chat_id\n"
        "/help ‚Äî —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ ‚Äú–ü–æ–∫—É–ø–∫–∞ –°—É–º–∞‚Äù –∞–±–æ —Ñ–æ—Ç–æ —á–µ–∫—É."
    )
    await update.message.reply_text(help_text)

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤–∏—Ç—Ä–∞—Ç
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    # —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    text = update.message.text or ''
    # —Ñ–æ—Ä–º–∞—Ç "–ü–æ–∫—É–ø–∫–∞ –°—É–º–∞"
    m = re.match(r'(?P<item>[\w\s]+?)\s+(?P<amount>\d+)', text)
    if not m:
        return await update.message.reply_text(
            "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: –ü–æ–∫—É–ø–∫–∞ –°—É–º–∞. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–æ–≤–±–∞—Å–∞ 80"
        )
    item   = m.group('item').strip()
    amount = m.group('amount')
    user   = update.message.from_user.first_name

    now      = datetime.now()
    date_str = now.strftime("%Y-%m-%d")
    # –¥–Ω—ñ —Ç–∏–∂–Ω—è UA
    days = {0:'–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',1:'–í—ñ–≤—Ç–æ—Ä–æ–∫',2:'–°–µ—Ä–µ–¥–∞',3:'–ß–µ—Ç–≤–µ—Ä',4:"–ü'—è—Ç–Ω–∏—Ü—è",5:'–°—É–±–æ—Ç–∞',6:'–ù–µ–¥—ñ–ª—è'}
    day_name  = days[now.weekday()]
    week_num  = now.isocalendar()[1]
    # –º—ñ—Å—è—Ü—ñ UA
    months = {1:'—Å—ñ—á–µ–Ω—å',2:'–ª—é—Ç–∏–π',3:'–±–µ—Ä–µ–∑–µ–Ω—å',4:'–∫–≤—ñ—Ç–µ–Ω—å',5:'—Ç—Ä–∞–≤–µ–Ω—å',6:'—á–µ—Ä–≤–µ–Ω—å',7:'–ª–∏–ø–µ–Ω—å',8:'—Å–µ—Ä–ø–µ–Ω—å',9:'–≤–µ—Ä–µ—Å–µ–Ω—å',10:'–∂–æ–≤—Ç–µ–Ω—å',11:'–ª–∏—Å—Ç–æ–ø–∞–¥',12:'–≥—Ä—É–¥–µ–Ω—å'}
    month_name = months[now.month]

    # –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏—Ç—Ä–∞—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
    records = sheet.get_all_records()
    daily_total = sum(
        int(r.get('–°—É–º–∞, –≥—Ä–Ω', r.get('sum',0)))
        for r in records
        if r.get('–î–∞—Ç–∞') == date_str
    )

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫: –¢–∏–∂–¥–µ–Ω—å, –î–µ–Ω—å —Ç–∏–∂–Ω—è, –ü–æ–∫—É–ø–∫–∞, –°—É–º–∞, –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á, –î–∞—Ç–∞, –ú—ñ—Å—è—Ü—å, –í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –¥–µ–Ω—å
    row = [week_num, day_name, item, amount, user, date_str, month_name, daily_total]
    sheet.append_row(row, value_input_option='USER_ENTERED')

    await update.message.reply_text(
        f"‚úÖ –î–æ–¥–∞–Ω–æ: {item} ‚Äî {amount} –≥—Ä–Ω  ({day_name}, —Ç–∏–∂–¥–µ–Ω—å {week_num})"
    )

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("id", send_id))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()
