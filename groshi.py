import os
import re
import json
import threading
import http.server
import socketserver
from datetime import datetime, date, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import pandas as pd

# ID –≤–∞—à–æ–≥–æ Telegram-—á–∞—Ç—É
ALLOWED_CHAT_ID = -4729811445

# –§–µ–π–∫–æ–≤–∏–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
def keep_port_open():
    PORT = int(os.environ.get("PORT", "10000"))
    Handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        httpd.serve_forever()
threading.Thread(target=keep_port_open, daemon=True).start()

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets
TOKEN = os.getenv("TELEGRAM_TOKEN")
SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")
creds_dict = json.loads(GOOGLE_CREDS_JSON)
creds = ServiceAccountCredentials.from_json_keyfile_dict(
    creds_dict,
    ["https://spreadsheets.google.com/feeds","https://www.googleapis.com/auth/drive"]
)
client = gspread.authorize(creds)
sheet = client.open_by_key(SHEET_ID).sheet1

# ‚Äî‚Äî‚Äî –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ ‚Äî‚Äî‚Äî
async def send_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID: return
    await update.message.reply_text(f"Chat ID = {update.effective_chat.id}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID: return
    text = (
        "üîπ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/id ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ chat_id\n"
        "/help ‚Äî —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n"
        "/day ‚Äî –≤–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n"
        "/dayall ‚Äî –≤–∏—Ç—Ä–∞—Ç–∏ –≤—Å—ñ—Ö –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n"
        "/week ‚Äî –≤–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –≤—ñ–¥ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞\n"
        "/weekall ‚Äî –≤–∏—Ç—Ä–∞—Ç–∏ –≤—Å—ñ—Ö –≤—ñ–¥ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞\n"
        "/month ‚Äî –≤–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –º—ñ—Å—è—Ü—å\n"
        "/monthall ‚Äî –≤–∏—Ç—Ä–∞—Ç–∏ –≤—Å—ñ—Ö –∑–∞ –º—ñ—Å—è—Ü—å"
    )
    await update.message.reply_text(text)

# ‚Äî‚Äî‚Äî –ó–∞–ø–∏—Å –≤–∏—Ç—Ä–∞—Ç–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî‚Äî‚Äî
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID: return
    text = update.message.text or ''
    m = re.match(r"(?P<item>[\w\s]+?)\s+(?P<amount>\d+)", text)
    if not m:
        return await update.message.reply_text(
            "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: –ü–æ–∫—É–ø–∫–∞ –°—É–º–∞. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–æ–≤–±–∞—Å–∞ 80"
        )
    item   = m.group('item').strip()
    amount = int(m.group('amount'))
    user   = update.message.from_user.first_name

    now       = datetime.now()
    date_str  = now.strftime("%Y-%m-%d")
    days      = {0:'–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',1:'–í—ñ–≤—Ç–æ—Ä–æ–∫',2:'–°–µ—Ä–µ–¥–∞',3:'–ß–µ—Ç–≤–µ—Ä',4:"–ü'—è—Ç–Ω–∏—Ü—è",5:'–°—É–±–æ—Ç–∞',6:'–ù–µ–¥—ñ–ª—è'}
    day_name  = days[now.weekday()]
    week_num  = now.isocalendar()[1]
    months    = {1:'—Å—ñ—á–µ–Ω—å',2:'–ª—é—Ç–∏–π',3:'–±–µ—Ä–µ–∑–µ–Ω—å',4:'–∫–≤—ñ—Ç–µ–Ω—å',5:'—Ç—Ä–∞–≤–µ–Ω—å',6:'—á–µ—Ä–≤–µ–Ω—å',7:'–ª–∏–ø–µ–Ω—å',8:'—Å–µ—Ä–ø–µ–Ω—å',9:'–≤–µ—Ä–µ—Å–µ–Ω—å',10:'–∂–æ–≤—Ç–µ–Ω—å',11:'–ª–∏—Å—Ç–æ–ø–∞–¥',12:'–≥—Ä—É–¥–µ–Ω—å'}
    month_name= months[now.month]

    # –ü–æ—Ä–æ–∂–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    sheet.append_row([
        week_num, day_name, item, amount, user, date_str, "", month_name
    ], value_input_option='USER_ENTERED')

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–Ω–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É
    records = sheet.get_all_records()
    df = pd.DataFrame(records)
    df.rename(columns={
        '–¢–∏–∂–¥–µ–Ω—å':'week','–î–µ–Ω—å —Ç–∏–∂–Ω—è':'day','–ü–æ–∫—É–ø–∫–∞':'item','–°—É–º–∞, –≥—Ä–Ω':'sum',
        '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á':'user','–î–∞—Ç–∞':'date','–ö–∞—Ç–µ–≥–æ—Ä—ñ—è':'cat','–ú—ñ—Å—è—Ü—å':'month'
    }, inplace=True)
    df['date'] = pd.to_datetime(df['date']).dt.date
    today = date.today()
    total_today = df[(df['user']==user)&(df['date']==today)]['sum'].astype(int).sum()
    if total_today > 250:
        await update.message.reply_text(
            f"‚ö†Ô∏è @{user}, –≤–∏ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ –¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç 250 –≥—Ä–Ω! –ó–∞–≥–∞–ª–æ–º: {total_today} –≥—Ä–Ω"
        )
    await update.message.reply_text(
        f"‚úÖ –î–æ–¥–∞–Ω–æ: {item} ‚Äî {amount} –≥—Ä–Ω  ({day_name}, —Ç–∏–∂–¥–µ–Ω—å {week_num})"
    )

# ‚Äî‚Äî‚Äî –î–æ–ø–æ–º—ñ–∂–Ω–∞ —É—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –∑–≤—ñ—Ç—ñ–≤ ‚Äî‚Äî‚Äî
def _prepare_df():
    rec = sheet.get_all_records()
    df = pd.DataFrame(rec)
    df.rename(columns={
        '–¢–∏–∂–¥–µ–Ω—å':'week','–î–µ–Ω—å —Ç–∏–∂–Ω—è':'day','–ü–æ–∫—É–ø–∫–∞':'item','–°—É–º–∞, –≥—Ä–Ω':'sum',
        '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á':'user','–î–∞—Ç–∞':'date','–ö–∞—Ç–µ–≥–æ—Ä—ñ—è':'cat','–ú—ñ—Å—è—Ü—å':'month'
    }, inplace=True)
    df['date'] = pd.to_datetime(df['date']).dt.date
    df['sum']  = df['sum'].astype(int)
    return df

# ‚Äî‚Äî‚Äî –ö–æ–º–∞–Ω–¥–∏ –∑–≤—ñ—Ç—ñ–≤ ‚Äî‚Äî‚Äî
async def day_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID: return
    df = _prepare_df()
    me = update.message.from_user.first_name
    today = date.today()
    d = df[(df['user']==me)&(df['date']==today)]
    total = d['sum'].sum()
    text = f"üî∏ –°—å–æ–≥–æ–¥–Ω—ñ ({today}) –≤–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ {total} –≥—Ä–Ω"
    if not d.empty:
        stats = d.groupby('cat')['sum'].sum()
        text += "\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º:" + "\n".join(f"{c}: {s} –≥—Ä–Ω" for c,s in stats.items())
    await update.message.reply_text(text)

async def dayall_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID: return
    df = _prepare_df()
    today = date.today()
    d = df[df['date']==today]
    total = d['sum'].sum()
    text = f"üîπ –°—å–æ–≥–æ–¥–Ω—ñ ({today}) –≤—Å—å–æ–≥–æ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ {total} –≥—Ä–Ω"
    if not d.empty:
        stats = d.groupby('cat')['sum'].sum()
        text += "\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º:" + "\n".join(f"{c}: {s} –≥—Ä–Ω" for c,s in stats.items())
    await update.message.reply_text(text)

async def week_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID: return
    df = _prepare_df()
    me = update.message.from_user.first_name
    today = date.today()
    monday = today - timedelta(days=today.weekday())
    d = df[(df['user']==me)&(df['date']>=monday)&(df['date']<=today)]
    total = d['sum'].sum()
    text = f"üî∏ –ó {monday} –¥–æ {today} –≤–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ {total} –≥—Ä–Ω"
    if not d.empty:
        stats = d.groupby('cat')['sum'].sum()
        text += "\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º:" + "\n".join(f"{c}: {s} –≥—Ä–Ω" for c,s in stats.items())
    await update.message.reply_text(text)

async def weekall_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID: return
    df = _prepare_df()
    today = date.today()
    monday = today - timedelta(days=today.weekday())
    d = df[(df['date']>=monday)&(df['date']<=today)]
    total = d['sum'].sum()
    text = f"üîπ –ó {monday} –¥–æ {today} –≤—Å—å–æ–≥–æ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ {total} –≥—Ä–Ω"
    if not d.empty:
        stats = d.groupby('cat')['sum'].sum()
        text += "\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º:" + "\n".join(f"{c}: {s} –≥—Ä–Ω" for c,s in stats.items())
    await update.message.reply_text(text)

async def month_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID: return
    df = _prepare_df()
    me = update.message.from_user.first_name
    today = date.today()
    first = today.replace(day=1)
    d = df[(df['user']==me)&(df['date']>=first)&(df['date']<=today)]
    total = d['sum'].sum()
    text = f"üî∏ –ó –ø–æ—á–∞—Ç–∫—É –º—ñ—Å—è—Ü—è –≤–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ {total} –≥—Ä–Ω"
    if not d.empty:
        stats = d.groupby('cat')['sum'].sum()
        text += "\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º:" + "\n".join(f"{c}: {s} –≥—Ä–Ω" for c,s in stats.items())
    await update.message.reply_text(text)

async def monthall_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID: return
    df = _prepare_df()
    today = date.today()
    first = today.replace(day=1)
    d = df[(df['date']>=first)&(df['date']<=today)]
    total = d['sum'].sum()
    text = f"üîπ –ó –ø–æ—á–∞—Ç–∫—É –º—ñ—Å—è—Ü—è –≤—Å—å–æ–≥–æ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ {total} –≥—Ä–Ω"
    if not d.empty:
        stats = d.groupby('cat')['sum'].sum()
        text += "\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º:" + "\n".join(f"{c}: {s} –≥—Ä–Ω" for c,s in stats.items())
    await update.message.reply_text(text)

# ‚Äî‚Äî‚Äî –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∑–≤—ñ—Ç—ñ–≤ —á–µ—Ä–µ–∑ automations ‚Äî –Ω–µ –∑–∞–±—É–¥—å –∑–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏:
# /dayall —â–æ–¥–Ω—è –æ 23:30 –∫–∏—ó–≤—Å—å–∫–æ–≥–æ —á–∞—Å—É
# /weekall —â–æ–Ω–µ–¥—ñ–ª—ñ –æ 23:30
# /monthall –≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –º—ñ—Å—è—Ü—è –æ 23:30

# ‚Äî‚Äî‚Äî –†–µ–≥—ñ—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ —ñ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ‚Äî‚Äî‚Äî
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    # –±–∞–∑–æ–≤—ñ
    app.add_handler(CommandHandler("id", send_id))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    # –∑–≤—ñ—Ç–∏
    app.add_handler(CommandHandler("day", day_command))
    app.add_handler(CommandHandler("dayall", dayall_command))
    app.add_handler(CommandHandler("week", week_command))
    app.add_handler(CommandHandler("weekall", weekall_command))
    app.add_handler(CommandHandler("month", month_command))
    app.add_handler(CommandHandler("monthall", monthall_command))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()
