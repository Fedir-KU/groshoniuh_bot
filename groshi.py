import os
import re
import json
import threading
import http.server
import socketserver
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import easyocr
import pandas as pd

# –î–æ–∑–≤–æ–ª–µ–Ω–∏–π chat_id –≤–∞—à–æ—ó –≥—Ä—É–ø–∏/—á–∞—Ç—É
ALLOWED_CHAT_ID = -4729811445  # <-- –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π ID

# –ó–∞–ø—É—Å–∫ —Ñ–µ–π–∫–æ–≤–æ–≥–æ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render

def keep_port_open():
    PORT = int(os.environ.get("PORT", "10000"))
    Handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        httpd.serve_forever()

threading.Thread(target=keep_port_open, daemon=True).start()

# –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è —Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets
TOKEN = os.getenv("TELEGRAM_TOKEN")
SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")

creds_dict = json.loads(GOOGLE_CREDS_JSON)
sheets_creds = ServiceAccountCredentials.from_json_keyfile_dict(
    creds_dict,
    ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
)
gspread_client = gspread.authorize(sheets_creds)
sheet = gspread_client.open_by_key(SHEET_ID).sheet1

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OCR (EasyOCR)
reader = easyocr.Reader(["uk", "en"], gpu=False)

# –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è rule-based –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
CATEGORY_KEYWORDS = {
    "—ó–∂–∞": ["—ó–∂–∞", "–ø—ñ—Ü–∞", "—Ö–ª—ñ–±", "–∫–∞–≤–∞", "—Å—É–ø"],
    "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["—Ç–∞–∫—Å—ñ", "uber", "bus", "–º–µ—Ç—Ä–æ", "–±–µ–Ω–∑–∏–Ω"],
    "—Ä–æ–∑–≤–∞–≥–∏": ["–∫—ñ–Ω–æ", "—Ç–µ–∞—Ç—Ä", "—ñ–≥—Ä–∏", "–∫–ª—É–±"],
    "–ø–æ–∫—É–ø–∫–∏": ["–∫—É–ø–∏–≤", "–º–∞–≥–∞–∑–∏–Ω", "amazon", "ozon"],
    "–ø–æ–±—É—Ç": ["–∫–æ–º—É–Ω–∞–ª", "—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç", "–∑–≤'—è–∑–æ–∫", "–≥–∞–∑", "—Å–≤—ñ—Ç–ª–æ", "–ø–ª–∞—Ç–µ–∂"]
}

def classify_category(text: str) -> str:
    low = text.lower()
    for cat, keywords in CATEGORY_KEYWORDS.items():
        for kw in keywords:
            if kw in low:
                return cat
    return "—ñ–Ω—à–µ"

# –ö–æ–º–∞–Ω–¥–∞ /id ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î chat_id
async def send_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    await update.message.reply_text(f"Chat ID = {update.effective_chat.id}")

# –ö–æ–º–∞–Ω–¥–∞ /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    help_text = (
        "üîπ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/id ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ chat_id\n"
        "/help ‚Äî —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n"
        "/sum <–∫–∞—Ç–µ–≥–æ—Ä—ñ—è> [YYYY-MM] ‚Äî —Å—É–º–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ –º—ñ—Å—è—Ü—å\n"
        "/report [YYYY-MM] ‚Äî –∑–≤—ñ—Ç –ø–æ –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö –∑–∞ –º—ñ—Å—è—Ü—å\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —Ñ–æ—Ç–æ —á–µ–∫—É ‚Äî –±–æ—Ç –∑–∞–ø–∏—à–µ –≤–∏—Ç—Ä–∞—Ç—É."
    )
    await update.message.reply_text(help_text)

# –ö–æ–º–∞–Ω–¥–∞ /sum ‚Äî —Å—É–º–∞ –≤–∏—Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
async def sum_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    args = context.args
    if not args:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /sum <–∫–∞—Ç–µ–≥–æ—Ä—ñ—è> [YYYY-MM]")
        return
    cat = args[0]
    month = args[1] if len(args) > 1 else datetime.now().strftime("%Y-%m")
    df = pd.DataFrame(sheet.get_all_records())
    if df.empty:
        await update.message.reply_text("–ù–µ–º–∞ –∑–∞–ø–∏—Å—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ.")
        return
    df["date"] = pd.to_datetime(df["date"])
    filtered = df[(df["cat"] == cat) & (df["date"].dt.strftime("%Y-%m") == month)]
    total = filtered["sum"].astype(int).sum()
    await update.message.reply_text(f"–£ {month} –Ω–∞ {cat} –≤–∏—Ç—Ä–∞—á–µ–Ω–æ {total} –≥—Ä–Ω")

# –ö–æ–º–∞–Ω–¥–∞ /report ‚Äî –∑–≤—ñ—Ç —É—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–∞ –º—ñ—Å—è—Ü—å
async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    month = context.args[0] if context.args else datetime.now().strftime("%Y-%m")
    df = pd.DataFrame(sheet.get_all_records())
    if df.empty:
        await update.message.reply_text("–ù–µ–º–∞ –∑–∞–ø–∏—Å—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ.")
        return
    df["date"] = pd.to_datetime(df["date"])
    filtered = df[df["date"].dt.strftime("%Y-%m") == month]
    sums = filtered.groupby("cat")["sum"].apply(lambda x: x.astype(int).sum())
    if sums.empty:
        await update.message.reply_text(f"–ù–µ–º–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ {month}.")
        return
    lines = [f"{cat}: {amt} –≥—Ä–Ω" for cat, amt in sums.items()]
    await update.message.reply_text(f"–ó–≤—ñ—Ç –∑–∞ {month}:\n" + "\n".join(lines))

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤–∏—Ç—Ä–∞—Ç
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    # OCR –¥–ª—è —Ñ–æ—Ç–æ
    if update.message.photo:
        file = await context.bot.get_file(update.message.photo[-1].file_id)
        path = '/tmp/receipt.jpg'
        await file.download_to_drive(path)
        text = ' '.join(reader.readtext(path, detail=0))
    else:
        text = update.message.text or ''
    # –ü–∞—Ä—Å–∏–º–æ —Å—É–º—É
    m = re.search(r"(\d+)", text)
    if not m:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å—É–º—É. –ù–∞–ø–∏—à—ñ—Ç—å '–∫–∞—Ç–µ–≥–æ—Ä—ñ—è —Å—É–º–∞ –æ–ø–∏—Å'.")
        return
    amount = m.group(1)
    cat = classify_category(text)
    parts = text.split(amount, 1)
    desc = parts[1].strip() if len(parts) > 1 else ''
    date = datetime.now().strftime("%Y-%m-%d")
    user = update.message.from_user.first_name
    sheet.append_row([date, user, cat, amount, desc])
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ: {cat} ‚Äî {amount} –≥—Ä–Ω ‚Äî {desc}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("id", send_id))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("sum", sum_command))
    app.add_handler(CommandHandler("report", report_command))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()
