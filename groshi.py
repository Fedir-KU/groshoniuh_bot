import os
import re
import json
import threading
import http.server
import socketserver
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –í–∫–∞–∂—ñ—Ç—å —Ç—É—Ç –≤–∞—à chat_id (–æ—Ç—Ä–∏–º–∞–Ω–∏–π —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /id)
ALLOWED_CHAT_ID = -1001234567890  # –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π chat_id

# üõ† –§–µ–π–∫–æ–≤–∏–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (—Å–ª—É—Ö–∞—î –ø–æ—Ä—Ç —ñ–∑ $PORT)
def keep_port_open():
    PORT = int(os.environ.get("PORT", "10000"))
    Handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print(f"Serving fake HTTP on port {PORT}")
        httpd.serve_forever()

threading.Thread(target=keep_port_open, daemon=True).start()

# üì• –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")

# üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets
creds_dict = json.loads(GOOGLE_CREDS_JSON)
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(SHEET_ID).sheet1

# –ö–æ–º–∞–Ω–¥–∞ /id
def send_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î chat_id –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Ç—É"""
    update.message.reply_text(f"Chat ID = {update.effective_chat.id}")

# üì© –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—à–∏—Ö —á–∞—Ç—ñ–≤
    if chat_id != ALLOWED_CHAT_ID:
        return

    message = update.message.text
    user = update.message.from_user.first_name
    date = datetime.now().strftime("%Y-%m-%d")

    match = re.match(r"(?P<cat>\w+)\s+(?P<sum>\d+)[^\d]*(?P<desc>.*)", message)
    if match:
        cat = match.group("cat")
        summ = match.group("sum")
        desc = match.group("desc").strip()
        sheet.append_row([date, user, cat, summ, desc])
        update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ: {cat} ‚Äî {summ} –≥—Ä–Ω ‚Äî {desc}")
    else:
        update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: '–∫–∞—Ç–µ–≥–æ—Ä—ñ—è —Å—É–º–∞ –æ–ø–∏—Å'. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: —ó–∂–∞ 200 –ø—ñ—Ü–∞")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    # –†–µ–≥—ñ—Å—Ç—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥—É /id
    app.add_handler(CommandHandler("id", send_id))
    # –†–µ–≥—ñ—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤–∏—Ç—Ä–∞—Ç
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()
